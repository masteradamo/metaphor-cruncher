from scipy.stats import pearsonr as pears
from sklearn.linear_model import LinearRegression as LR
import numpy as np

fr = '/home/masteradamo/academy/data/TwenteMetaphor/'

#wins = ["BOW"]
#lims = ["200"]
xpaces = ["L0"]

wins = ["2","5","BOW"]
lims = ["20","200"]
spaces = ["Joint","Harm","Geom","Rati","Simp","Indy","Zipped"]
#xpaces = ["L0","L1","L2"]
mets = ["metaphoricity","meaningfulness","familiarity"]

mod = LR()

def singler(info):
    print "INFO",info
    ftr = open(fr+"x".join(info)+"Norm.txt",'r').readlines()
    labs = ftr[0].split(",")[6:]
    xes,yes = [[] for x in labs],[[] for y in mets]
    for line in ftr[1:229]:
        line = line.split(",")
        for n in range(len(yes)):
            yes[n].append(float(line[n+3]))
        for n in range(len(xes)):
            xes[n].append(float(line[n+6]))
    return xes,yes

def oner(info,labs):
    xes,yes = singler(info)
    print "x".join(info)
    feats = []
    for n in range(len(mets)):
        feats.append([y[1] for y in sorted ([(abs(pears(xes[x],yes[n])[0]),x) for x in range(len(xes))],reverse=True)])
    return feats

def refiner(feat,ext,fac,xes):
    res = [[x[feat[0]]] for x in xes]
    tal = [feat[0]]
    pt = 1
#    print "FEAT",len(feat),ext
    while len(tal) < ext and pt < len(feat):
        qes = [x[pt] for x in xes]
        mod.fit(res,qes)
#        print "SCORE",mod.score(res,qes)
        if 1/(1-min(0.99,mod.score(res,qes))) < fac:
            for n in range(len(res)):
                res[n].append(xes[n][pt])
            tal.append(feat[pt])
#            print "ACCEPT"
#        else:
#            print "REJECT"
        pt += 1
    return res,tal

def multier(info):
    ftr = open(fr+"x".join(info)+"Norm.txt",'r').readlines()
    xes = [[float(x) for x in y.split(",")[6:]] for y in ftr[1:229]]
    yes = [[] for y in mets]
    for line in ftr[1:229]:
        line = line.split(",")
        for n in range(len(yes)):
            yes[n].append(float(line[n+3]))
    return xes,yes

def looer(xes,yes):
#    print "LOO",len(xes),len(yes)
    preds = []
    for n in range(len(yes)):
        mod.fit(xes[:n]+xes[n+1:],yes[:n]+yes[n+1:])
        preds.append(mod.predict(np.array(xes[n]).reshape(1,-1))[0])
    return pears(yes,preds)[0]

def aller(xes,yes):
    mod.fit(xes,yes)
    preds = mod.predict(xes)
    return pears(yes,preds)[0]

def manyer(info):
    xes,yes = multier(info)
    print "x".join(info)
    for n in range(len(mets)):
        print mets[n]+":","%.3f" % looer(xes,yes[n])
#        print mets[n]+":","%.3f" % aller(xes,yes[n])
    print ""

def feater(xes,yes):
    scores = sorted([(abs(pears(xes,yes[x])[0]),labs[x]) for x in range(len(yes))],reverse=True)

def looper(info,labs,ext,fac):
    out = []
    feats = oner(info,labs)
    xes,yes = multier(info)
#    res,tal = refiner(feats[n],ext,fac,xes)
    for n in range(len(mets)):
        res,tal = refiner(feats[n],ext,fac,xes)
        score = looer(res,yes[n])
        print mets[n]+":","%.3f" % score,[labs[x] for x in tal]
        out.append((score,[labs[x] for x in tal],tal))
    return out

def redoer(feats,info,pt):
    ftr = [x.split(",") for x in open(fr+"x".join(info)+"Norm.txt",'r').readlines()[1:229]]
    yes = [float(x[pt]) for x in ftr]
#    print "FEATS",feats
    xes = [[float(x[y+6]) for y in feats] for x in ftr]
    mod.fit(xes,yes)
    return mod.predict(xes)

def runner(ext,fac):
    labs = open(fr + "5x200xSimpNorm.txt",'r').readlines()[0].split(",")[6:]
    print "LABS",len(labs),labs
    catch = [[],[],[]]
    for wi in wins:
        for li in lims:
            for sp in spaces:
                info = [wi,li,sp]
                if sp in spaces[:4]:
                    for xp in xpaces:
                        out = looper(info+[xp],labs,ext,fac)
                        for n in range(len(catch)):
                            catch[n].append((out[n][0],info+[xp],out[n][1]))
#                        oner(info+[xp],labs)
#                        manyer(info+[xp])
                else:
                     out = looper(info,labs,ext,fac)
                     for n in range(len(catch)):
                         catch[n].append((out[n][0],info,out[n][1],out[n][2]))
#                     oner(info,labs)
#                     manyer(info)
#    print "CATCH",catch[0]
#    print "CATCH",sorted(catch[0],reverse=True)
    for n in range(len(catch)):
        print mets[n] + ": ",[("%.3f" % x[0],"x".join(x[1]),x[2]) for x in sorted(catch[n],reverse=True)[:3]]
    return [sorted(x,reverse=True)[0] for x in catch]

def finisher(catch):
    means = redoer(catch[1][3],catch[1][1],4)
    fams = redoer(catch[2][3],catch[2][1],5)
    ftr = [x.split(",") for x in open(fr+"x".join(catch[0][1])+"Norm.txt",'r').readlines()[1:229]]
    yes = [float(x[3]) for x in ftr]
    xes = [[means[x],fams[x]] + [float(ftr[x][y+6]) for y in catch[0][3]] for x in range(len(ftr))]
    print "XES",len(xes),len(xes[0]),xes[0]
    print "FINAL:","%.3f" % looer(xes,yes)

catch = runner(10,10)
finisher(catch)
